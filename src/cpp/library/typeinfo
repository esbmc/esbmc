/*******************************************************************
 Module:

 Author: Felipe Rodrigues

 Date: September 2012

 \*******************************************************************/

#ifndef STL_TYPEINFO
#define STL_TYPEINFO

#include <exception>

#include "definitions.h"

namespace std
{
class type_info
{
public:
  virtual ~type_info()
  {
  }
  bool operator==(const type_info &rhs) const;
  bool operator!=(const type_info &rhs) const;
  bool before(const type_info &rhs) const;
  const char *name() const;

private:
  type_info(const type_info &rhs);
  type_info &operator=(const type_info &rhs);
};

/**
 *  @brief  Thrown during incorrect typecasting.
 *  @ingroup exceptions
 *
 *  If you attempt an invalid @c dynamic_cast expression, an instance of
 *  this class (or something derived from this class) is thrown.
 *  */

class bad_cast : public exception
{
public:
#if __cplusplus >= 201103L // Check if C++11 or later is being used
  bad_cast() noexcept;
#else
  bad_cast()
  {
  }
#endif
#if __cplusplus >= 201103L // Check if C++11 or later is being used
  virtual ~bad_cast() noexcept
  {
  }
  virtual const char *what() const noexcept
  {
    return "Bad cast";
  }
#else
  virtual ~bad_cast()
  {
  }
  virtual const char *what() const throw()
  {
    return "Bad cast";
  }

#endif
};

class bad_typeid : public exception
{
public:
#if __cplusplus >= 201103L // Check if C++11 or later is being used
  bad_typeid() noexcept;
#else
  bad_typeid()
  {
  }
#endif
#if __cplusplus >= 201103L // Check if C++11 or later is being used
  virtual ~bad_typeid() noexcept
  {
  }
  virtual const char *what() const noexcept
  {
    return "Bad typeid";
  }
#else
  virtual ~bad_typeid()
  {
  }
  virtual const char *what() const throw()
  {
    return "Bad typeid";
  }
#endif
};

} // namespace std

#endif
