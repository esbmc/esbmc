#ifndef STL_FUNCTIONAL
#define STL_FUNCTIONAL

#include <cassert>
#include <utility>  // std::forward

namespace std {

// Base class for callable objects
class callable_base {
public:
  virtual ~callable_base() = default;
  virtual int invoke(int, int) const { assert(false); return 0; }
  virtual int invoke(int) const { assert(false); return 0; }
  virtual bool invoke_bool(int, int) const { assert(false); return false; }
  virtual bool invoke_bool(int) const { assert(false); return false; }
};

// Wrapper for callable types (function pointers, lambdas, functors)
template <typename Callable>
class callable_wrapper : public callable_base {
private:
  Callable func;

public:
  explicit callable_wrapper(Callable&& f) : func(std::forward<Callable>(f)) {}

  int invoke(int a, int b) const override {
    if constexpr (std::is_invocable_v<Callable, int, int>) {
      return func(a, b);
    } else {
      assert(false);
      return 0;
    }
  }

  int invoke(int a) const override {
    if constexpr (std::is_invocable_v<Callable, int>) {
      return func(a);
    } else {
      assert(false);
      return 0;
    }
  }

  bool invoke_bool(int a, int b) const override {
    if constexpr (std::is_invocable_r_v<bool, Callable, int, int>) {
      return func(a, b);
    } else {
      assert(false);
      return false;
    }
  }

  bool invoke_bool(int a) const override {
    if constexpr (std::is_invocable_r_v<bool, Callable, int>) {
      return func(a);
    } else {
      assert(false);
      return false;
    }
  }
};

// Standard-like std::function model
template <typename Signature>
class function;

template <typename Ret, typename... Args>
class function<Ret(Args...)> {
private:
  callable_base* func = nullptr;

public:
  function() = default;

  function(Ret (*f)(Args...)) {
    if (f) {
      func = new callable_wrapper<Ret (*)(Args...)>(move(f));
    }
  }

  template <typename Callable>
  function(Callable f) {
    func = new callable_wrapper<Callable>(move(f));
  }

  function(const function& other) = delete;
  function& operator=(const function& other) = delete;

  function(function&& other) noexcept {
    func = other.func;
    other.func = nullptr;
  }

  function& operator=(function&& other) noexcept {
    if (this != &other) {
      delete func;
      func = other.func;
      other.func = nullptr;
    }
    return *this;
  }

  ~function() {
    delete func;
  }

  Ret operator()(Args... args) const {
    assert(func != nullptr);
    return func->invoke(std::forward<Args>(args)...);
  }

  explicit operator bool() const noexcept {
    return func != nullptr;
  }
};

// Legacy binary_function class template (for compatibility)
template <typename Arg1, typename Arg2, typename Result>
struct binary_function {
  using first_argument_type = Arg1;
  using second_argument_type = Arg2;
  using result_type = Result;
};

// Arithmetic Operations
template <typename T = int>
struct plus {
  constexpr T operator()(const T& a, const T& b) const { return a + b; }
};

template <typename T = int>
struct minus {
  constexpr T operator()(const T& a, const T& b) const { return a - b; }
};

template <typename T = int>
struct multiplies {
  constexpr T operator()(const T& a, const T& b) const { return a * b; }
};

template <typename T = int>
struct divides {
  constexpr T operator()(const T& a, const T& b) const { return a / b; }
};

template <typename T = int>
struct modulus {
  constexpr T operator()(const T& a, const T& b) const { return a % b; }
};

template <typename T = int>
struct negate {
  constexpr T operator()(const T& a) const { return -a; }
};

// Comparison Operations
template <typename T = int>
struct equal_to {
  constexpr bool operator()(const T& a, const T& b) const { return a == b; }
};

template <typename T = int>
struct not_equal_to {
  constexpr bool operator()(const T& a, const T& b) const { return a != b; }
};

template <typename T = int>
struct greater {
  constexpr bool operator()(const T& a, const T& b) const { return a > b; }
};

template <typename T = int>
struct less {
  constexpr bool operator()(const T& a, const T& b) const { return a < b; }
};

template <typename T = int>
struct greater_equal {
  constexpr bool operator()(const T& a, const T& b) const { return a >= b; }
};

template <typename T = int>
struct less_equal {
  constexpr bool operator()(const T& a, const T& b) const { return a <= b; }
};

// Logical Operations
template <typename T = bool>
struct logical_and {
  constexpr bool operator()(const T& a, const T& b) const { return a && b; }
};

template <typename T = bool>
struct logical_or {
  constexpr bool operator()(const T& a, const T& b) const { return a || b; }
};

template <typename T = bool>
struct logical_not {
  constexpr bool operator()(const T& a) const { return !a; }
};

// Bitwise Operations
template <typename T = int>
struct bit_and {
  constexpr T operator()(const T& a, const T& b) const { return a & b; }
};

template <typename T = int>
struct bit_or {
  constexpr T operator()(const T& a, const T& b) const { return a | b; }
};

template <typename T = int>
struct bit_xor {
  constexpr T operator()(const T& a, const T& b) const { return a ^ b; }
};

template <typename T = int>
struct bit_not {
  constexpr T operator()(const T& a) const { return ~a; }
};

// Simplified std::invoke model
template <typename Func, typename... Args>
decltype(auto) invoke(Func&& f, Args&&... args) {
  return forward<Func>(f)(forward<Args>(args)...);
}

} // namespace std

#endif // STL_FUNCTIONAL