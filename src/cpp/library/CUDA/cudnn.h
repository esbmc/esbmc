#if !defined(__CUDNN_H__)
#  define __CUDNN_H__

#  include <cstdlib>
#  include <cublas.h>

typedef struct cudnnactivationdescriptor
{
} cudnnActivationDescriptor_t;

typedef struct cudnnhandle
{
} cudnnHandle_t;

typedef enum cudnnstatus
{
  CUDNN_STATUS_SUCCESS,
  CUDNN_STATUS_NOT_INITIALIZED,
  CUDNN_STATUS_ALLOC_FAILED,
  CUDNN_STATUS_BAD_PARAM,
  CUDNN_STATUS_ARCH_MISMATCH,
  CUDNN_STATUS_MAPPING_ERROR,
  CUDNN_STATUS_EXECUTION_FAILED,
  CUDNN_STATUS_INTERNAL_ERROR,
  CUDNN_STATUS_NOT_SUPPORTED,
  CUDNN_STATUS_LICENSE_ERROR,
  CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING,
  CUDNN_STATUS_RUNTIME_IN_PROGRESS,
  CUDNN_STATUS_RUNTIME_FP_OVERFLOW
} cudnnstt;

typedef enum cudnnstatus cudnnStatus_t;

typedef enum cudnntensorformat
{
  CUDNN_TENSOR_NCHW,
  CUDNN_TENSOR_NHWC,
  CUDNN_TENSOR_NCHW_VECT_C
} cudnntnsformat;

typedef enum cudnntensorformat cudnnTensorFormat_t;

typedef enum cudnnConvolutionMode
{
  CUDNN_CONVOLUTION,
  CUDNN_CROSS_CORRELATION
} cudnnConvMode;

typedef enum cudnnConvolutionMode cudnnConvolutionMode_t;

typedef enum cudnndatatype
{
  CUDNN_DATA_FLOAT,
  CUDNN_DATA_DOUBLE,
  CUDNN_DATA_HALF,
  CUDNN_DATA_INT8,
  CUDNN_DATA_UINT8,
  CUDNN_DATA_INT32,
  CUDNN_DATA_INT8x4,
  CUDNN_DATA_UINT8x4
} cudnndttype;

typedef enum cudnndatatype cudnnDataType_t;

typedef struct cudnntensordesc
{
  cudnnTensorFormat_t format;
  cudnnDataType_t dataType;
  int n;
  int c;
  int h;
  int w;
} cudnnTensorDescriptor_t;

typedef struct cudnnfilterdesc
{
  cudnnTensorFormat_t format;
  cudnnDataType_t dataType;
  int n;
  int c;
  int h;
  int w;
} cudnnFilterDescriptor_t;

typedef struct cudnnconvoldesc
{
  int pad_h;
  int pad_w;
  int u;
  int v;
  int dilation_h;
  int dilation_w;
  cudnnConvolutionMode_t mode;
  cudnnDataType_t computeType;
} cudnnConvolutionDescriptor_t;

typedef struct cudnnconvolbwd
{
} cudnnConvolutionBwdDataAlgo_t;

typedef struct cudnnconvbwdfilter
{
} cudnnConvolutionBwdFilterAlgo_t;

typedef enum cudnnconvolvfwdalg
{
  CUDNN_CONVOLUTION_FWD_ALGO_GEMM

} cudnnConvolutionFwdAlgo_t;

typedef struct cudnnlrndesc
{
} cudnnLRNDescriptor_t;

typedef struct cudnndivnormmd
{
} cudnnDivNormMode_t;

typedef enum cudnnactivationmode
{
  CUDNN_ACTIVATION_SIGMOID,
  CUDNN_ACTIVATION_RELU,
  CUDNN_ACTIVATION_TANH,
  CUDNN_ACTIVATION_CLIPPED_RELU,
  CUDNN_ACTIVATION_ELU,
  CUDNN_ACTIVATION_IDENTITY
} cudnnactmode;

typedef enum cudnnactivationmode cudnnActivationMode_t;

typedef enum cudnnnanpropagation
{
  CUDNN_NOT_PROPAGATE_NAN,
  CUDNN_PROPAGATE_NAN
} cudnnanprop;

typedef enum cudnnnanpropagation cudnnNanPropagation_t;

float sigmoidFunction(float u)
{
  //lookuptable of sigmoid function variating from -20 to 20 with .00 of resolution
  float lookup[4000] = {
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002, 0.000002,
    0.000002, 0.000002, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006,
    0.000006, 0.000006, 0.000006, 0.000006, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017,
    0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045, 0.000045,
    0.000045, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123, 0.000123,
    0.000123, 0.000123, 0.000123, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000335,
    0.000335, 0.000335, 0.000335, 0.000335, 0.000335, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911, 0.000911,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473, 0.002473,
    0.002473, 0.002473, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693, 0.006693,
    0.006693, 0.006693, 0.006693, 0.006693, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986,
    0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.017986, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426, 0.047426,
    0.047426, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203, 0.119203,
    0.119203, 0.119203, 0.119203, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.268941,
    0.268941, 0.268941, 0.268941, 0.268941, 0.268941, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059, 0.731059,
    0.731059, 0.731059, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797, 0.880797,
    0.880797, 0.880797, 0.880797, 0.880797, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574,
    0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.952574, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014, 0.982014,
    0.982014, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307, 0.993307,
    0.993307, 0.993307, 0.993307, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.997527,
    0.997527, 0.997527, 0.997527, 0.997527, 0.997527, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089, 0.999089,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665, 0.999665,
    0.999665, 0.999665, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877, 0.999877,
    0.999877, 0.999877, 0.999877, 0.999877, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955,
    0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999955, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983, 0.999983,
    0.999983, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994, 0.999994,
    0.999994, 0.999994, 0.999994, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998,
    0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000};

  int index = 0;
  index = (int)u * 100;
  index = index + 2000;

  if (index < 0)
    return 0;
  else if (index >= 4000)
    return 1;
  else
    return lookup[index];
}

float dSigmoidFunction(float u)
{
  float result;
  result = sigmoidFunction(u) * (1 - sigmoidFunction(u));
  return result;
}

float ReLUFunction(float u)
{
  if (u < 0)
  {
    return 0.0f;
  }
  return u;
}

float dReLUFunction(float u)
{
  if (u < 0)
  {
    return 0.0f;
  }
  return 1.0f;
}

cudnnStatus_t cudnnCreateTensorDescriptor(cudnnTensorDescriptor_t *tensordesc)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnCreateFilterDescriptor(cudnnFilterDescriptor_t *tensordesc)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t
cudnnCreateActivationDescriptor(cudnnActivationDescriptor_t *actvdesc)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t
cudnnCreateConvolutionDescriptor(cudnnConvolutionDescriptor_t *convdesc)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnCreate(cudnnHandle_t *cudnnhan)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnSetTensor4dDescriptor(
  cudnnTensorDescriptor_t &tensorDesc,
  cudnnTensorFormat_t format,
  cudnnDataType_t dataType,
  int n,
  int c,
  int h,
  int w)
{
  tensorDesc.format = format;
  tensorDesc.dataType = dataType;
  tensorDesc.n = n;
  tensorDesc.c = c;
  tensorDesc.h = h;
  tensorDesc.w = w;

  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnSetFilter4dDescriptor(
  cudnnFilterDescriptor_t &tensorDesc,
  cudnnDataType_t dataType,
  cudnnTensorFormat_t format,
  int n,
  int c,
  int h,
  int w)
{
  tensorDesc.format = format;
  tensorDesc.dataType = dataType;
  tensorDesc.n = n;
  tensorDesc.c = c;
  tensorDesc.h = h;
  tensorDesc.w = w;

  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnSetConvolution2dDescriptor(
  cudnnConvolutionDescriptor_t &convDesc,
  int pad_h,
  int pad_w,
  int u,
  int v,
  int dilation_h,
  int dilation_w,
  cudnnConvolutionMode_t mode,
  cudnnDataType_t computeType)
{
  convDesc.pad_h = pad_h;
  convDesc.pad_w = pad_w;
  convDesc.u = u;
  convDesc.v = v;
  convDesc.dilation_h = dilation_h;
  convDesc.dilation_w = dilation_w;
  convDesc.mode = mode;
  convDesc.computeType = computeType;

  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnGetConvolution2dForwardOutputDim(
  cudnnConvolutionDescriptor_t convDesc,
  cudnnTensorDescriptor_t xDesc,
  cudnnFilterDescriptor_t wDesc,
  int *n,
  int *c,
  int *h,
  int *w)
{
  *h =
    (xDesc.h + 2 * convDesc.pad_h - convDesc.dilation_h * (wDesc.h - 1) - 1) /
      convDesc.u +
    1;
  *w =
    (xDesc.w + 2 * convDesc.pad_w - convDesc.dilation_w * (wDesc.w - 1) - 1) /
      convDesc.v +
    1;

  *c = wDesc.n;
  *n = xDesc.n;

  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnSetActivationDescriptor(
  cudnnActivationDescriptor_t activationDesc,
  cudnnActivationMode_t mode,
  cudnnNanPropagation_t reluNanOpt,
  double coef)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnDestroy(cudnnHandle_t cudnnhan)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnDestroyTensorDescriptor(cudnnTensorDescriptor_t tensorDesc)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t
cudnnDestroyActivationDescriptor(cudnnActivationDescriptor_t activationDesc)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnActivationForward(
  cudnnHandle_t handle,
  cudnnActivationDescriptor_t activationDesc,
  const float *alpha,
  const cudnnTensorDescriptor_t xDesc,
  const float *x,
  const float *beta,
  const cudnnTensorDescriptor_t yDesc,
  float *y)
{
  int i = 0;
  int limit = 5;

  for (i = 0; i < limit; i++)
  {
    y[i] = sigmoidFunction(x[i]);
  }
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnActivationBackward(
  cudnnHandle_t handle,
  cudnnActivationDescriptor_t activationDesc,
  const float *alpha,
  const cudnnTensorDescriptor_t yDesc,
  const float *y,
  const cudnnTensorDescriptor_t dyDesc,
  const float *dy,
  const cudnnTensorDescriptor_t xDesc,
  const float *x,
  const float *beta,
  const cudnnTensorDescriptor_t dxDesc,
  float *dx)
{
  int contador = 0;
  for (contador = 0; contador < 5; contador++)
  {
    dx[contador] = (y[contador] * (1 - y[contador])) * dy[contador];
  }
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnAddTensor(
  cudnnHandle_t handle,
  const void *alpha,
  const cudnnTensorDescriptor_t aDesc,
  const void *A,
  const void *beta,
  const cudnnTensorDescriptor_t cDesc,
  void *C)
{
  return CUDNN_STATUS_SUCCESS;
}

float *universal_img2col(
  const float *data,
  int *output_rows,
  int *output_cols,
  int channels,
  int height,
  int width,
  int block_height,
  int block_width,
  int stride = 1,
  int padding = 0)
{
  int output_height = (height + 2 * padding - block_height) / stride + 1;
  int output_width = (width + 2 * padding - block_width) / stride + 1;
  int output_size =
    channels * block_height * block_width * output_height * output_width;

  float *columns = (float *)__ESBMC_alloca(output_size * sizeof(float));

  for (int c = 0; c < channels; c++)
  {
    for (int h = 0; h < output_height; h++)
    {
      for (int w = 0; w < output_width; w++)
      {
        for (int i = 0; i < block_height; i++)
        {
          for (int j = 0; j < block_width; j++)
          {
            int row = c * block_height * block_width + i * block_width + j;
            int col = h * output_width + w;

            int y = h * stride + i - padding;
            int x = w * stride + j - padding;

            // Check if current position is inside padding area
            if (y >= 0 && y < height && x >= 0 && x < width)
            {
              columns[row * output_height * output_width + col] =
                data[(c * height + y) * width + x];
            }
            else
            {
              columns[row * output_height * output_width + col] =
                0; // padding value
            }
          }
        }
      }
    }
  }
  *output_rows = channels * block_height * block_width;
  *output_cols = output_height * output_width;

  return columns;
}

cudnnStatus_t cudnnConvolutionBackwardBias(
  cudnnHandle_t handle,
  const void *alpha,
  const cudnnTensorDescriptor_t dyDesc,
  const void *dy,
  const void *beta,
  const cudnnTensorDescriptor_t dbDesc,
  void *db)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnConvolutionBackwardData(
  cudnnHandle_t handle,
  const void *alpha,
  const cudnnFilterDescriptor_t wDesc,
  const void *w,
  const cudnnTensorDescriptor_t dyDesc,
  const void *dy,
  const cudnnConvolutionDescriptor_t convDesc,
  cudnnConvolutionBwdDataAlgo_t algo,
  void *workSpace,
  size_t workSpaceSizeInBytes,
  const void *beta,
  const cudnnTensorDescriptor_t dxDesc,
  void *dx)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnConvolutionBackwardFilter(
  cudnnHandle_t handle,
  const void *alpha,
  const cudnnTensorDescriptor_t xDesc,
  const void *x,
  const cudnnTensorDescriptor_t dyDesc,
  const void *dy,
  const cudnnConvolutionDescriptor_t convDesc,
  cudnnConvolutionBwdFilterAlgo_t algo,
  void *workSpace,
  size_t workSpaceSizeInBytes,
  const void *beta,
  const cudnnFilterDescriptor_t dwDesc,
  void *dw)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnConvolutionForward(
  cudnnHandle_t handle,
  const float *alpha,
  const cudnnTensorDescriptor_t xDesc,
  const float *x,
  const cudnnFilterDescriptor_t wDesc,
  const float *w,
  const cudnnConvolutionDescriptor_t convDesc,
  cudnnConvolutionFwdAlgo_t algo,
  void *workSpace,
  size_t workSpaceSizeInBytes,
  const float *beta,
  const cudnnTensorDescriptor_t yDesc,
  float *y,
  int channals,
  int xwidth,
  int wwidth,
  int stride,
  int padding)
{
  int rows, cols, krows, kcols;

  float *img = universal_img2col(
    x, &rows, &cols, channals, xwidth, xwidth, wwidth, wwidth, stride, padding);
  float *kernel = universal_img2col(
    w, &krows, &kcols, channals, wwidth, wwidth, wwidth, wwidth);

  for (int contadorZ = 0; contadorZ < rows; contadorZ++)
  {
    for (int contadorY = 0; contadorY < kcols; contadorY++)
    {
      float result = 0;
      for (int contadorX = 0; contadorX < cols; contadorX++)
      {
        result = (img[contadorX + contadorZ * cols] *
                  kernel[contadorX * kcols + contadorY]) +
                 result;
      }
      y[contadorY + contadorZ * kcols] =
        result + y[contadorY + contadorZ * kcols];
    }
  }

  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnDivisiveNormalizationBackward(
  cudnnHandle_t handle,
  cudnnLRNDescriptor_t normDesc,
  cudnnDivNormMode_t mode,
  const void *alpha,
  const cudnnTensorDescriptor_t xDesc,
  const void *x,
  const void *means,
  const void *dy,
  void *temp,
  void *temp2,
  const void *beta,
  const cudnnTensorDescriptor_t dxDesc,
  void *dx,
  void *dMeans)
{
  return CUDNN_STATUS_SUCCESS;
}

cudnnStatus_t cudnnDivisiveNormalizationForward(
  cudnnHandle_t handle,
  cudnnLRNDescriptor_t normDesc,
  cudnnDivNormMode_t mode,
  const void *alpha,
  const cudnnTensorDescriptor_t xDesc,
  const void *x,
  const void *means,
  void *temp,
  void *temp2,
  const void *beta,
  const cudnnTensorDescriptor_t yDesc,
  void *y)
{
  return CUDNN_STATUS_SUCCESS;
}

#endif /* __CUDNN_H__ */
