#ifndef __STL_VECTOR
#define __STL_VECTOR

#include <stdlib.h>
#include <assert.h>

#include "stdexcept"
#include <utility> /* std::move */
#include <new> /* placement-new */

#define VECTOR_CAPACITY 500

namespace std
{

template <class T>
class vector
{
public:
  class reverse_iterator
  {
  public:
    T *pointer;
    int pos;
    T *vec_pos;
    reverse_iterator(const reverse_iterator &i)
    {
      pointer = i.pointer;
      pos = i.pos;
      vec_pos = i.vec_pos;
    }
    reverse_iterator()
    {
    }
    reverse_iterator &operator=(const reverse_iterator &i)
    {
      pointer = i.pointer;
      pos = i.pos;
      vec_pos = i.vec_pos;
      return *this;
    }

    T *operator->();

    T &operator*()
    {
      return *pointer;
    }

    reverse_iterator &operator++();
    reverse_iterator operator++(int n)
    {
      reverse_iterator buffer;
      buffer.pointer = pointer;
      buffer.pos = pos;
      buffer.vec_pos = vec_pos;
      pointer -= sizeof(T);
      pos--;
      return buffer;
    }

    reverse_iterator &operator--();
    reverse_iterator operator--(int);

    bool operator==(const reverse_iterator &) const;
    bool operator!=(const reverse_iterator &) const;

    bool operator<(const reverse_iterator &) const;
    bool operator>(const reverse_iterator &) const;

    bool operator<=(const reverse_iterator &) const;
    bool operator>=(const reverse_iterator &) const;

    reverse_iterator operator+(int) const;
    reverse_iterator operator-(int) const;

    reverse_iterator &operator+=(int);
    reverse_iterator &operator-=(int);
  };

  class const_reverse_iterator
  {
  public:
    const_reverse_iterator(const const_reverse_iterator &);
    const_reverse_iterator();
    const_reverse_iterator &operator=(const const_reverse_iterator &);

    const T *operator->();

    const T &operator*();

    const_reverse_iterator &operator++();
    const_reverse_iterator operator++(int);

    const_reverse_iterator &operator--();
    const_reverse_iterator operator--(int);

    bool operator==(const const_reverse_iterator &) const;
    bool operator!=(const const_reverse_iterator &) const;

    bool operator<(const const_reverse_iterator &) const;
    bool operator>(const const_reverse_iterator &) const;

    bool operator<=(const const_reverse_iterator &) const;
    bool operator>=(const const_reverse_iterator &) const;

    const_reverse_iterator operator+(int) const;
    const_reverse_iterator operator-(int) const;

    const_reverse_iterator &operator+=(int);
    const_reverse_iterator &operator-=(int);
  };

  // types:
  typedef T &reference;
  typedef const T &const_reference;
  typedef int size_type;
  typedef int difference_type;
  typedef T value_type;
  typedef T *pointer;
  typedef const T *const_pointer;

  typedef pointer iterator;
  typedef const_pointer const_iterator;

  // construct:
  explicit vector() : _size(0), _capacity(1)
  {
    buf = new T[1];
    _size = 0;
    _capacity = 1;
  }

  explicit vector(iterator t1, iterator t2) : _size(0)
  {
    int count = 0;
    iterator tmp = t1;
    for (; tmp != t2; tmp++)
      count++;

    buf = new T[count];
    int n = 0;
    for (; t1 != t2; t1++)
    {
      buf[n++] = *t1;
    }
    _size = n;
    _capacity = _size;
  }

  explicit vector(size_type n) : _size(0), _capacity(1)
  {
    buf = new T[n];
    _size = 0;
    for (int i = 0; i < n; i++)
    {
      push_back(T());
    }
    _capacity = n;
  }

  template <typename InputIt>
  vector(InputIt t, InputIt addr) : _size(0), _capacity(1)
  {
    int count = 0;
    for (InputIt tmp = t; tmp != addr; tmp++)
      count++;

    buf = new T[count];
    for (int i = 0; i < count; i++)
      buf[i] = *t++;

    _size = count;
    _capacity = _size;
  }

  explicit vector(size_type n, const T &x)
  {
    buf = new T[n];
    _size = n;
    for (int i = 0; i < n; i++)
      buf[i] = x;
    _capacity = n;
  }

  vector(const vector &x) : _size(0), _capacity(1)
  {
    buf = new T[x._size];
    _size = x._size;
    for (int i = 0; i < _size; i++)
      buf[i] = x.buf[i];
    _capacity = _size;
  }

  vector &operator=(const vector &x)
  {
    buf = new T[x._size];
    _size = x._size;
    for (int i = 0; i < _size; i++)
      buf[i] = x.buf[i];
    _capacity = _size;
    return *this;
  }

  void assign(size_type n, const T &u)
  {
    _size = n;
    buf = static_cast<T *>(realloc(buf, sizeof(T) * n));
    for (int i = 0; i < n; i++)
      buf[i] = u;
    _capacity = _size;
  }

  void assign(iterator t1, iterator t2)
  {
    int count = 0;
    iterator tmp = t1;
    for (; tmp != t2; tmp++)
      count++;

    buf = new T[count];
    int n = 0;
    for (; t1 != t2; t1++)
    {
      buf[n++] = *t1;
    }
    _size = n;
    _capacity = _size;
  }

  void assign(void *t1, void *t2)
  {
    int i = 0;
    _size = 0;
    T *t11 = (T *)t1;
    T *t21 = (T *)t2;
    while ((t11 + i) < t21)
      push_back(t11[i++]);
    _capacity = _size;
  }

  // iterators:
  iterator begin()
  {
    return buf;
  }

  const_iterator begin() const
  {
    return buf;
  }

  iterator end()
  {
    assert(_size >= 0);
    return buf + _size;
  }

  const_iterator end() const
  {
    return buf + _size;
  }

  reverse_iterator rbegin()
  {
    reverse_iterator buffer;
    buffer.pointer = buf + _size - 1;
    buffer.pos = _size - 1;
    buffer.vec_pos = buf;
    return buffer;
  }

  const_reverse_iterator rbegin() const;

  reverse_iterator rend()
  {
    reverse_iterator buffer;
    buffer.pointer = NULL;
    buffer.pos = -1;
    buffer.vec_pos = buf;
    return buffer;
  }

  const_reverse_iterator rend() const;

  // capacity:
  size_type size() const
  {
    assert(0 <= _size);
    assert(_size <= VECTOR_CAPACITY);
    return _size;
  }

  size_type max_size() const;

  void resize(size_type sz)
  {
    if (sz <= _size)
    {
      _size = sz;
      return;
    }

    // Rather than repeatedly pushing back, bump up the size of the vector
    // once, and then fill it with default data.
    unsigned int difference = sz - _size;
    buf = static_cast<T *>(realloc(buf, sizeof(T) * sz));
    // XXX -- really we should be initializing with a nondeterministic value
    // to model the fact that these new elements are undefined.
    for (unsigned int n = _size; n < sz; n++)
      buf[n] = T();

    _size = sz;
    _capacity = _size;
    return;
  }

  void resize(size_type sz, T t)
  {
    if (sz <= _size)
    {
      _size = sz;
      return;
    }

    unsigned int difference = sz - _size;
    _size = sz;
    reserve(_size);
    for (unsigned int n = 0; n < difference; n++)
      buf[n] = t;

    return;
  }

  size_type capacity() const
  {
    assert(0 <= _size && _size <= _capacity);
    return _capacity;
  }

  bool empty() const
  {
    return (_size == 0) ? true : false;
  }

  void reserve(size_type n)
  {
    if (n > _capacity)
    {
      buf = static_cast<T *>(realloc(buf, sizeof(T) * n));
      __ESBMC_assume(buf); // XXX - exceptions?
      _capacity = n;
    }
  }

  // element access:
  reference operator[](size_type i)
  {
    assert(0 <= i);
    assert(i < _size);
    assert(_size <= VECTOR_CAPACITY);
    return buf[i];
  }

  const_reference operator[](size_type i) const
  {
    assert(0 <= i);
    assert(i < _size);
    assert(_size <= VECTOR_CAPACITY);
    return buf[i];
  }

  const_reference at(size_type n) const
  {
    assert(0 <= n);
    assert(n < _size);
    assert(_size <= VECTOR_CAPACITY);
    return buf[n];
  }
  reference at(size_type n)
  {
    assert(0 <= n);
    assert(n < _size);
    assert(_size <= VECTOR_CAPACITY);
    return buf[n];
  }
  reference front()
  {
    return buf[0];
  }
  const_reference front() const
  {
    return buf[0];
  }

  value_type back()
  {
    return buf[_size - 1];
  }

  const_reference back() const
  {
    return buf[_size - 1];
  }

  // modifiers:

  void push_back(const T &x)
  {
    assert(0 <= _size);
    assert(_size < VECTOR_CAPACITY);
    _size++;
    reserve(_size);
    buf[_size - 1] = x;
  }

  void pop_back()
  {
    __ESBMC_assert(_size != 0, "pop_back() on empty vector");
    _size--;
    buf[_size] = T();
  }

  iterator insert(iterator position, const T &x)
  {
    size_type at = position - buf;

    // Fist, give us space for one more item.
    buf = static_cast<T *>(realloc(buf, sizeof(T) * (_size + 1)));

    // We need to shift all fields at or above the position iterator up
    // one place. Backwards copy to avoid overwriting existing data.
    for (int i = _size - 1; i >= at; i--)
    {
      buf[i + 1] = buf[i];
    }

    // And now install the new value.
    buf[at] = x;
    _size++;
    _capacity = _size;
    return buf + at;
  }

  void insert(iterator position, iterator first, iterator last)
  {
    while (first != last)
    {
      position = insert(position, *first);
      position++;
      first++;
    }
  }

  iterator insert(const_iterator pos, size_type count, const T &value)
  {
    size_type at = pos - buf;
#if 0 /* TODO: can't use placement-new, yet: needs more frontend support */
    reserve(_size + count);
    for (size_type i = _size; i > at; i--)
# if __cplusplus >= 201103L // Check if C++11 or later is being used
      new(&buf[i + count - 1]) T(std::move(buf[i - 1]));
# else
      new(&buf[i + count - 1]) T(buf[i - 1]);
# endif
    _size += count;
#else
    size_type sz = _size;
    resize(_size + count);
    for (size_type i = sz; i > at; i--)
# if __cplusplus >= 201103L // Check if C++11 or later is being used
      buf[i + count - 1] = std::move(buf[i - 1]);
# else
      buf[i + count - 1] = buf[i - 1];
# endif
#endif
    for (size_type i = 0; i < count; i++)
      buf[i + at] = value;
    return buf + at;
  }

  iterator erase(iterator position)
  {
    size_type at = position - buf;
    for (int i = at; i < _size - 1; i++)
    {
      buf[i] = buf[i + 1];
    }
    _size--;
    buf[_size] = T();
    return position;
  }

  iterator erase(iterator first, iterator last)
  {
    iterator it;
    while (first != last)
    {
      it = erase(last--);
    }
    return it;
  }

  void swap(vector &v1)
  {
    vector aux;
    aux = v1;
    v1 = *this;
    *this = aux;
  }

  void clear()
  {
    _size = 0;
    buf[0] = T();
    return;
  }

  // comparators:
  bool operator==(const vector &rhv)
  {
    if (this->size() != rhv.size())
      return false;
    int i = 0;
    while (i != this->size())
    {
      if (this->at(i) != rhv[i])
        return false;
      i++;
    }
    return true;
  }

  bool operator!=(const vector &rhv)
  {
    return (!(*this == rhv));
  }

  bool operator>=(const vector &rhv)
  {
    return ((*this == rhv) || (this->size() > rhv.size()));
  }

  bool operator<=(const vector &rhv)
  {
    return ((*this == rhv) || (this->size() < rhv.size()));
  }

private:
  T *buf;
  int _size;
  int _capacity;

  T null_value()
  {
    return T();
  }
};

} // namespace std

#endif
