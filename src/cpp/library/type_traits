#pragma once

namespace std {
/**
 * If the type T is a reference type, provides the member typedef
 * type which is the type referred to by T. Otherwise type is T.
 * 
 * The behavior of a program that adds specializations for
 * std::remove_reference is undefined.
 * 
 * source: https://en.cppreference.com/w/cpp/types/remove_reference
 **/

template <class T>
struct remove_reference
{
  typedef T type;
};

template <class T>
struct remove_reference<T&>
{
  typedef T type;
};

template <class T>
struct remove_reference<T&&>
{
  typedef T type;
};

}
