/*******************************************************************
 Module:

 Author: Felipe Rodrigues

 Date: Feb 2012

 \*******************************************************************/

#ifndef STL_STRING
#define STL_STRING

#include "cstring"

typedef int size_t;

static const size_t npos = -1;

namespace std {

struct string {
public:

	struct const_iterator {
	public:
		const_iterator(const const_iterator&);
		const_iterator();
		const_iterator& operator=(const const_iterator&);

		template<typename T>
		const T* operator ->();

		template<class T>
		const T& operator *();
		const_iterator& operator *();

		const_iterator& operator ++();
		const_iterator& operator ++(int);

		const_iterator& operator --();
		const_iterator& operator --(int);

		bool operator ==(const const_iterator&) const;
		bool operator !=(const const_iterator&) const;

		bool operator <(const const_iterator&) const;
		bool operator >(const const_iterator&) const;

		bool operator <=(const const_iterator&) const;
		bool operator >=(const const_iterator&) const;

		const_iterator operator +(int) const;
		const_iterator operator -(int) const;

		const_iterator& operator +=(int);
		const_iterator& operator -=(int);
	};

	string();
	string(char* s) {
		__ESBMC_HIDE:
		_size = strlen(s);
		str = new char[_size + 1];

		strcpy(str, s);
	}
	string(const char * s, size_t n);
	string(size_t n, char c);
	char* c_str();
	const char* c_str() const;
	char* c_str2();
	const_iterator begin() const;
	const_iterator end() const;
	bool operator==(string& b);
	bool operator==(const char* lhs);
	bool operator==(string& a, string& b);
	bool operator==(const char* lhs, string& rhs);
	bool operator==(string& lhs, const char* rhs);
	bool operator!=(string& a);
	bool operator!=(const char* lhs);
	bool operator!=(const char* lhs, string& rhs);
	bool operator!=(string& lhs, const char* rhs);
	bool operator>(string& a);
	bool operator>(const char* lhs, string& rhs);
	bool operator>(string& lhs, const char* rhs);
	bool operator<(string& a);
	bool operator<(const char* lhs, string& rhs);
	bool operator<(string& lhs, const char* rhs);
	bool operator>=(string& a);
	bool operator>=(const char* lhs, string& rhs);
	bool operator>=(string& lhs, const char* rhs);
	bool operator<=(string& a);
	bool operator<=(const char* lhs, string& rhs);
	bool operator<=(string& lhs, const char* rhs);
	string& operator=(const string& str);
	string& operator=(const char* s);
	string& operator=(char c);
	string& operator+=(const string& d);
	string operator +=(string& d, string& s);
	string& operator +=(const char* d); //TEST
	string operator+(const string& str1, const string& str3);
	string operator+(const string& d);
	char& operator[](size_t pos);
	bool empty() const;
	char& at(size_t pos) const;
	int compare(const string& str) const;
	int compare(int pos1, size_t n1, string& str) const;
	int compare(size_t pos1, size_t n1, string& s, size_t pos2, size_t n2) const;
	size_t length() const;
	string substr(size_t pos, size_t npos) const;
	string substr(size_t npos) const;
	size_t find_first_of(const string& str, size_t pos = 0) const;
	size_t find_first_of(const char* s, size_t pos, size_t n) const;
	size_t find_first_of(const char* s, size_t pos = 0) const;
	size_t find_first_of(char c, size_t pos = 0) const;
	size_t find(const string& str, size_t pos = 0) const;
	size_t find(const char* s, size_t pos, size_t n) const;
	size_t find(const char* s, size_t pos = 0) const;
	size_t find(char c, size_t pos = 0) const;
	string& assign(const string& str);
	string& assign(const string& str, size_t pos, size_t n);
	string& assign(const char* s, size_t n);
	string& assign(const char* s);
	string& assign(size_t n, char c);
	string& append(const string& str);
	string& append(const string& str, size_t pos, size_t n);
	string& append(const char* s, size_t n);
	string& append(const char* s);
	string& append(size_t n, char c);
	void swap(string& str);
	void resize(size_t n, char c);
	void resize(size_t n);
	size_t capacity() const;
	size_t max_size() const;
	size_t size() const;
	size_t rfind(const string& str, size_t pos = npos) const;
	size_t rfind(const char* s, size_t pos, size_t n) const;
	size_t rfind(const char* s, size_t pos = npos) const;
	size_t rfind(char c, size_t pos = npos) const;
	size_t find_last_of(const string& str, size_t pos = npos) const;
	size_t find_last_of(const char* s, size_t pos, size_t n) const;
	size_t find_last_of(const char* s, size_t pos = npos) const;
	size_t find_last_of(char c, size_t pos = npos) const;
	size_t find_first_not_of(const string& str, size_t pos = 0) const;
	size_t find_first_not_of(const char* s, size_t pos, size_t n) const;
	size_t find_first_not_of(const char* s, size_t pos = 0) const;
	size_t find_first_not_of(char c, size_t pos = 0) const;
	string& erase(size_t pos = 0, size_t n = npos);
	string& replace(size_t pos1, size_t n1, const string& str);
	string& replace(size_t pos1, size_t n1, const string& str, size_t pos2,
			size_t n2);
	string& replace(size_t pos1, size_t n1, const char* s, size_t n2);
	string& replace(size_t pos1, size_t n1, const char* s);
	string& replace(size_t pos1, size_t n1, size_t n2, char c);
	string& insert(size_t pos1, const string& str);
	string& insert(size_t pos1, const string& str, size_t pos2, size_t n);
	string& insert(size_t pos1, const char* s, size_t n);
	string& insert(size_t pos1, const char* s);
	string& insert(size_t pos1, size_t n, char c);
	size_t copy(char* s, size_t n, size_t pos = 0) const;
	const char* data() const;
private:
	char *str;
	int _size;
};
}
#endif
