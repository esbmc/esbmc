name: Run Benchexec (SV-Comp)
on:
  workflow_dispatch:
    inputs:
      strategy:
        description: 'Which Strategy to use? (incr, kinduction, falsi). THIS IS BEING IGNORED!'
        required: true
        default: 'incr'
      timeout:
        description: 'Timeout for each benchmarks (in seconds)'
        required: true
        default: '10'


jobs:
  build-linux:
    name: Build Linux Release
    runs-on: ubuntu-20.04
    steps:
      - name: Small test
        run: echo ${{ github.event.inputs.timeout }}
      - name: Checkout code
        uses: actions/checkout@master
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install gperf libgmp-dev cmake bison flex gcc-multilib linux-libc-dev libboost-all-dev ninja-build python3-setuptools libtinfo-dev
      - name: Download Clang 11
        run: wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz
      - name: Extract Clang 11
        run: tar xf clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz && mv clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04 clang
      - name: Setup boolector
        run: git clone https://github.com/boolector/boolector && cd boolector && git reset --hard 3.2.2 && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./configure.sh --prefix $PWD/../boolector-release && cd build && make -j9 && make install
      - name: Get current folder and files
        run: pwd && ls
      - name: Configure CMake
        run: mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang -DBUILD_STATIC=On -DBoolector_DIR=$PWD/../boolector-release
      - name: Build ESBMC
        run: cd build && cmake --build .
      - uses: actions/upload-artifact@v1
        with:
          name: release-linux
          path: ./build/src/esbmc/esbmc

  run-benchexec:
    runs-on: ['self-hosted', 'Linux', 'x64', 'benchexec']
    timeout-minutes: 6000
    needs: build-linux
    steps:
      - name: Download Linux Build
        uses: actions/download-artifact@v1
        with:
          name: release-linux
          path: ./
      - name: Run Benchexec
        env:
          TIMEOUT: ${{ inputs.timeout }}
        run: |
          rm -rf $HOME/output-action 
          mkdir $HOME/output-action
          cp ./esbmc $HOME/output-action
          cd $HOME/output-action
          cp $HOME/esbmc-wrapper.py .
          cp $HOME/esbmc-kind.xml .
          chmod +x ./esbmc
          benchexec -o ../output/ -N 24 ./esbmc-kind.xml --read-only-dir / --overlay-dir /home --no-container -T ${{ github.event.inputs.timeout }}
      - uses: actions/upload-artifact@v1
        with:
          name: benchexec-result
          path: /home/vm/output-action
