name: Build All Solvers

on: [push, pull_request]

jobs:

  # Check testing tool suite
  testing-tool:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Runs testing tool unit test
      run: cd regression && python3 testing_tool_test.py

  fast-tests:
    name: Run unit and fuzz targets
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo apt-get update && sudo apt-get install gperf libgmp-dev cmake bison flex gcc-multilib linux-libc-dev libboost-all-dev ninja-build python3-setuptools libtinfo-dev
    - name: Download Clang 11
      run: wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz
    - name: Extract Clang 11
      run: tar xf clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz && mv clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04 clang
    - name: Get current folder and files
      run: pwd && ls
    - name: Configure CMake
      run: mkdir build && cd build && CC=../clang/bin/clang CXX=../clang/bin/clang++ cmake .. -GNinja -DBUILD_TESTING=On -DENABLE_FUZZER=On -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang
    - name: Build ESBMC without solvers
      run: cd build && ninja
    - name: Run tests
      run: cd build && ninja test

  clang-tidy:
    name: Run clang-tidy
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo apt-get update && sudo apt-get install clang-tidy gperf libgmp-dev cmake bison flex gcc-multilib linux-libc-dev libboost-all-dev ninja-build python3-setuptools libtinfo-dev
    - name: Download Clang 11
      run: wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz
    - name: Extract Clang 11
      run: tar xf clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz && mv clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04 clang
    - name: Get current folder and files
      run: pwd && ls
    - name: Configure CMake
      run: mkdir build && cd build && CC=../clang/bin/clang CXX=../clang/bin/clang++ cmake .. -GNinja -DENABLE_CLANG_TIDY=On -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang
    - name: Run tests
      run: cd build && ninja || echo "fail" # TODO: Eventually this will be removed

  build-linux:
    name: Build ESBMC with all Solvers (Linux)
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo apt-get update && sudo apt-get install csmith libcsmith-dev gperf libgmp-dev cmake bison flex gcc-multilib linux-libc-dev libboost-all-dev ninja-build python3-setuptools libtinfo-dev && pip install toml
    - name: Download Clang 11
      run: wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz
    - name: Extract Clang 11
      run: tar xf clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz && mv clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04 clang
    - name: Setup boolector
      run: git clone --depth=1 --branch=3.2.1 https://github.com/boolector/boolector && cd boolector && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./configure.sh --prefix $PWD/../boolector-release && cd build && make -j4 && make install
    - name: Setup Z3
      run: wget https://github.com/Z3Prover/z3/releases/download/z3-4.8.9/z3-4.8.9-x64-ubuntu-16.04.zip && unzip z3-4.8.9-x64-ubuntu-16.04.zip && mv z3-4.8.9-x64-ubuntu-16.04/ z3
    - name: Setup Yices 2 (GMP)
      run: wget https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz && tar xf gmp-6.1.2.tar.xz && rm gmp-6.1.2.tar.xz && cd gmp-6.1.2 && ./configure --prefix $PWD/../gmp --disable-shared ABI=64 CFLAGS=-fPIC CPPFLAGS=-DPIC && make -j4 && make install
    - name: Setup Yices 2
      run: git clone https://github.com/SRI-CSL/yices2.git && cd yices2 && git checkout Yices-2.6.1 && autoreconf -fi && ./configure --prefix $PWD/../yices --with-static-gmp=$PWD/../gmp/lib/libgmp.a && make -j4 && make static-lib && make install && cp ./build/x86_64-pc-linux-gnu-release/static_lib/libyices.a ../yices/lib
    - name: Setup CVC4
      run: git clone https://github.com/CVC4/CVC4.git && cd CVC4 && git reset --hard b826fc8ae95fc && ./contrib/get-antlr-3.4 && ./configure.sh --optimized --prefix=../cvc4 --static --no-static-binary && cd build && make -j4 && make install
    - name: Setup bitwuzla
      run: git clone --depth=1 --branch=smtcomp-2021 https://github.com/bitwuzla/bitwuzla.git && cd bitwuzla && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./contrib/setup-symfpu.sh && ./configure.sh --prefix $PWD/../bitwuzla-release && cd build && cmake -DGMP_INCLUDE_DIR=$PWD/../../gmp/include -DGMP_LIBRARIES=$PWD/../../gmp/lib/libgmp.a -DONLY_LINGELING=ON ../ && make -j8 && make install
    - name: Get current folder and files
      run: pwd && ls
    - name: Configure CMake
      run: mkdir build && cd build && cmake .. -GNinja -DENABLE_WERROR=On -DENABLE_CSMITH=On -DBUILD_TESTING=On -DENABLE_REGRESSION=On -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang -DBUILD_STATIC=On -DBoolector_DIR=$PWD/../boolector-release -DZ3_DIR=$PWD/../z3 -DENABLE_YICES=On -DYices_DIR=$PWD/../yices -DCVC4_DIR=$PWD/../cvc4 -DGMP_DIR=$PWD/../gmp -DBitwuzla_DIR=$PWD/../bitwuzla-release -DCMAKE_INSTALL_PREFIX:PATH=$PWD/../release -DCMAKE_BUILD_TYPE=Debug -DENABLE_SOLIDITY_FRONTEND=On -DENABLE_OLD_FRONTEND=On
    - name: Build ESBMC
      run: cd build && cmake --build . && ninja install
    - uses: actions/upload-artifact@v1
      with:
        name: release-linux
        path: ./release
    - name: Run tests
      run: cd build/ && ctest -j4 --output-on-failure --progress .
    - uses: actions/upload-artifact@v2 # We shouldn't throw errors for now
      with:
        name: csmith-linux
        path: ./build/csmith-error
        if-no-files-found: ignore

  build-macos:
    name: Build ESBMC with all Solvers (macOS)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '9.0.4'
      - name: Install Dependencies
        run: brew install gmp csmith cmake boost ninja python3 automake bison flex && pip3 install PySMT toml
      - name: Download Clang 11
        run: wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz
      - name: Extract Clang 11
        run: tar xf clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz && mv clang+llvm-11.0.0-x86_64-apple-darwin clang
      - name: Setup boolector
        run: git clone --depth=1 --branch=3.2.1 https://github.com/boolector/boolector && cd boolector && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./configure.sh --prefix $PWD/../boolector-release && cd build && make -j4 && make install
      - name: Setup Z3
        run: brew install z3
      - name: Setup Yices 2
        run: git clone https://github.com/SRI-CSL/yices2.git && cd yices2 && git checkout Yices-2.6.1 && autoreconf -fi && ./configure --prefix $PWD/../yices && make -j4 && make static-lib && make install && cp ./build/x86_64-apple-darwin*release/static_lib/libyices.a ../yices/lib
      - name: Setup CVC4
        run: git clone https://github.com/CVC4/CVC4.git && cd CVC4 && git reset --hard b826fc8ae95fc && ./contrib/get-antlr-3.4 && ./configure.sh --python3 --optimized --prefix=../cvc4 --static --no-static-binary && cd build && make -j4 && make install
      - name: Setup bitwuzla
        run: git clone --depth=1 --branch=smtcomp-2021 https://github.com/bitwuzla/bitwuzla.git && cd bitwuzla && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./contrib/setup-symfpu.sh && ./configure.sh --prefix $PWD/../bitwuzla-release && cd build && cmake -DONLY_LINGELING=ON ../ && make -j8 && make install
      - name: Get current folder and files
        run: pwd && ls
      - name: Configure CMake
        run: mkdir build && cd build && cmake .. -GNinja -DENABLE_WERROR=On -DENABLE_CSMITH=On -DBUILD_TESTING=On -DENABLE_REGRESSION=On -DBUILD_STATIC=On -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang -DBoolector_DIR=$PWD/../boolector-release -DZ3_DIR=$PWD/../z3 -DENABLE_YICES=ON -DYices_DIR=$PWD/../yices -DCVC4_DIR=$PWD/../cvc4 -DBitwuzla_DIR=$PWD/../bitwuzla-release -DC2GOTO_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DCMAKE_INSTALL_PREFIX:PATH=$PWD/../release -DCMAKE_BUILD_TYPE=Debug -DENABLE_SOLIDITY_FRONTEND=On
      - name: Build ESBMC
        run: cd build && cmake --build . && cmake --install .
      - uses: actions/upload-artifact@v1
        with:
          name: release-macos
          path: ./release
      - name: Run tests
        run: cd build/ && chmod +x macos-wrapper.sh && ctest -j4 --output-on-failure --progress .
      - uses: actions/upload-artifact@v2 # We shouldn't throw errors for now
        with:
          name: csmith-macos
          path: ./build/csmith-error
          if-no-files-found: ignore

  build-windows:
    name: Build ESBMC with Z3 (Windows)
    runs-on: windows-latest
    steps:
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: check python
      run: python --version
    - name: Make git use LF only
      run: |
        git config --system core.autocrlf false
        git config --system core.eol lf
    - uses: actions/checkout@v2
    - name: Instal gnu tools (od)
      run: choco install -y gnuwin32-coreutils.portable nsis.portable
    - name: Check if od is on path
      run: od.exe --version
    - name: Update vcpkg
      run: |
        vcpkg.exe update
        cd C:/vcpkg
        git.exe pull
        .\bootstrap-vcpkg.bat
    - name: vcpkg integrate
      run: vcpkg.exe integrate install
    - name: Install Boost
      run: vcpkg.exe install boost-filesystem:x64-Windows boost-date-time:x64-windows boost-test:x64-windows boost-multi-index:x64-windows boost-crc:x64-windows boost-property-tree:x64-windows boost-uuid:x64-windows boost-program-options:x64-windows boost-iostreams:x64-windows
    - name: Install Bison/Flex
      run: choco install -y winflexbison
    - name: Prepare Environment
      run: .\scripts\configure_environment.ps1
    - name: Check environment
      run: |
        ls C:\vcpkg\installed\x64-windows\bin\
        ls C:\Deps
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake.exe .. -A x64 -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DENABLE_REGRESSION=On -DBUILD_TESTING=On -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_DIR=C:/deps/clang/clang -DClang_DIR=C:/deps/clang/clang -DZ3_DIR=C:/deps/z3-4.8.9-x64-win -DBOOST_DLL_FILE="C:/deps/boost_filesystem-vc143-mt-x64-1_79.dll;C:/deps/boost_program_options-vc143-mt-x64-1_79.dll" -DCMAKE_INSTALL_PREFIX:PATH=C:/deps/esbmc -DENABLE_SOLIDITY_FRONTEND=On
    - name: Build ESBMC
      run: |
        cd build
        cmake --build . --target INSTALL  --config RelWithDebInfo
    - uses: actions/upload-artifact@v1
      with:
          name: release-windows
          path: C:/deps/esbmc
    - name: Run Tests
      run: |
        cd build
        ctest -j4 --output-on-failure --progress . -C RelWithDebInfo
