JSON AST (compact format):


======= contract.sol =======
{
  "absolutePath": "contract.sol",
  "exportedSymbols":
  {
    "MyContract":
    [
      14
    ]
  },
  "id": 15,
  "nodeType": "SourceUnit",
  "nodes":
  [
    {
      "id": 1,
      "literals":
      [
        "solidity",
        ">=",
        "0.4",
        ".26"
      ],
      "nodeType": "PragmaDirective",
      "src": "0:25:0"
    },
    {
      "abstract": false,
      "baseContracts": [],
      "canonicalName": "MyContract",
      "contractDependencies": [],
      "contractKind": "contract",
      "fullyImplemented": true,
      "id": 14,
      "linearizedBaseContracts":
      [
        14
      ],
      "name": "MyContract",
      "nameLocation": "36:10:0",
      "nodeType": "ContractDefinition",
      "nodes":
      [
        {
          "body":
          {
            "id": 12,
            "nodeType": "Block",
            "src": "81:34:0",
            "statements":
            [
              {
                "assignments":
                [
                  5
                ],
                "declarations":
                [
                  {
                    "constant": false,
                    "id": 5,
                    "mutability": "mutable",
                    "name": "y",
                    "nameLocation": "90:1:0",
                    "nodeType": "VariableDeclaration",
                    "scope": 12,
                    "src": "85:6:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions":
                    {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName":
                    {
                      "id": 4,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "85:4:0",
                      "typeDescriptions":
                      {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "id": 7,
                "initialValue":
                {
                  "hexValue": "74727565",
                  "id": 6,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "94:4:0",
                  "typeDescriptions":
                  {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "true"
                },
                "nodeType": "VariableDeclarationStatement",
                "src": "85:13:0"
              },
              {
                "expression":
                {
                  "arguments":
                  [
                    {
                      "id": 9,
                      "name": "y",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "109:1:0",
                      "typeDescriptions":
                      {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  ],
                  "expression":
                  {
                    "argumentTypes":
                    [
                      {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    ],
                    "id": 8,
                    "name": "assert",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": -3,
                    "src": "102:6:0",
                    "typeDescriptions":
                    {
                      "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                      "typeString": "function (bool) pure"
                    }
                  },
                  "id": 10,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "102:9:0",
                  "tryCall": false,
                  "typeDescriptions":
                  {
                    "typeIdentifier": "t_tuple$__$",
                    "typeString": "tuple()"
                  }
                },
                "id": 11,
                "nodeType": "ExpressionStatement",
                "src": "102:9:0"
              }
            ]
          },
          "functionSelector": "a5dca050",
          "id": 13,
          "implemented": true,
          "kind": "function",
          "modifiers": [],
          "name": "bool_literal",
          "nameLocation": "59:12:0",
          "nodeType": "FunctionDefinition",
          "parameters":
          {
            "id": 2,
            "nodeType": "ParameterList",
            "parameters": [],
            "src": "71:2:0"
          },
          "returnParameters":
          {
            "id": 3,
            "nodeType": "ParameterList",
            "parameters": [],
            "src": "81:0:0"
          },
          "scope": 14,
          "src": "50:65:0",
          "stateMutability": "nonpayable",
          "virtual": false,
          "visibility": "public"
        }
      ],
      "scope": 15,
      "src": "27:90:0",
      "usedErrors": []
    }
  ],
  "src": "0:119:0"
}